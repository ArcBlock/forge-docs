# The configurations that used for the recording, feel free to edit them
config:

  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  command: bash -l
  
  # Specify the current working directory path
  # the default is the current working directory path
  cwd: /Users/shi/projects/Arcblock/forge-docs/src/instruction/install/assets
  
  # Export additional ENV variables
  env:
    recording: true
  
  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 132
  
  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 15
  
  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0
  
  # Quality
  # 1 - 100
  quality: 20
  
  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto
  
  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: 2000
  
  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: floating
    title: Terminalizer
    style:
      border: 0px black solid
      # boxShadow: none
      # margin: 0px
  
  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9
  
  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block
  
  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "Monaco, Lucida Console, Ubuntu Mono, Monospace"
  
  # The size of the font
  fontSize: 12
  
  # The height of lines
  lineHeight: 1
  
  # The spacing between letters
  letterSpacing: 0
  
  # Theme
  theme:
    background: "transparent"
    foreground: "#afafaf"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"
  
# Records, feel free to edit them
records:
  - delay: 1101
    content: 'Shis-MacBook-Pro:assets shi$ '
  - delay: 1566
    content: f
  - delay: 134
    content: o
  - delay: 113
    content: r
  - delay: 236
    content: g
  - delay: 112
    content: e
  - delay: 664
    content: ' '
  - delay: 147
    content: '-'
  - delay: 709
    content: h
  - delay: 899
    content: "\r\n"
  - delay: 952
    content: "Usage: forge [options] [command]\r\n\r\nOptions:\r\n  -V, --version                       output the version number\r\n  -v, --verbose                       Output runtime info when execute subcommand, useful for debug\r\n  -c, --chain-name <chainName>        Execute command use specific chain\r\n  -i, --config-path <path>            Forge config used when starting forge node and initializing gRPC clients\r\n  -r, --npm-registry <registry>       Specify a custom npm registry\r\n  -y, --yes                           Assume that the answer to any confirmation question is yes\r\n  -d, --defaults                      Run command using default values for all questions\r\n  -m, --mirror <url>                  Mirror host used to download forge release\r\n  -g, --socket-grpc <endpoint>        Socket gRPC endpoint to connect, with this you can use forge-cli with a remote node\r\n  -h, --help                          output usage information\r\n\r\nCommands:\r\n  account <address>                   Get an account info by address\r\n  asset <address>                     Get asset info by address\r\n  block [options] [height]            Get the block info from the running node\r\n  blocklet:init                       Init a blocklet project\r\n  blocklet:use [options]              Download and install a blocklet\r\n  chain:config [options] [action]     Read/write chain/node config\r\n  chain:create [chainName]            Create a new chain instance\r\n  chain:ls                            List all chains\r\n  chain:remove <chainName>            Remove chain state and config\r\n  chain:reset <chainName>             Reset chain state, but keeps the config\r\n  config [options] [key] [value]      Config forge cli configs\r\n  contract:activate [name|address]    Activate a contract by name or address\r\n  contract:compile [sourceDir]        Compile a forge contract\r\n  contract:create [options]           Create contract files\r\n  contract:deactivate [name|address]  Deactivate a contract\r\n  contract:deploy [itxPath]           Deploy a compiled contract to ABT Node\r\n  contract:ls                         List contracts\r\n  declare:node                        Declare the current node to be a validator candidate\r\n  download [options] [version]        Download a forge release without activate it\r\n  help [subcommand]                   Show help of a sub command\r\n  install [options] [version]         Download and setup forge release on this machine\r\n  join <endpoint>                     Join a network by providing a valid forge web graphql endpoint\r\n  logs [type]                         Show logs for various forge components\r\n  ls                                  List forge releases installed locally\r\n  ls:remote                           List remote forge releases available for install\r\n  prepare [options]                   Prepare node for deploying a multi-node chain\r\n  ps                                  List running forge component processes\r\n  remote [shellName]                  Connects to the running system via a remote shell\r\n  simulator [action]                  Start/stop simulator and generate random traffic\r\n  start [options] [<chainName>]       Start the forge and forge web deamon\r\n  status [type]                       List info of the running chain/node\r\n  stop [options] [<chainName>]        Stop the forge daemon and all related services\r\n  swap [action] [version]             Start forge swap service\r\n  tx [hash]                           Get a tx detail and display\r\n  tx:ls                               List latest transactions\r\n  upgrade [<chainName>]               Upgrade chain node to new version without reset\r\n  use [version]                       Activate an already downloaded forge release\r\n  version [<chainName>]               Output version for all forge components\r\n  wallet:create                       Create a local wallet and dump its public/private key\r\n  web [options] [action]              Start/stop the web interface of running forge chain/node\r\n  workshop [action]                   Start/stop the dApps workshop\r\n\r\nExamples:\r\n\r\n  Please install a forge-release before running any other commands\r\n  > \e[36mforge install latest\e[39m\r\n  > \e[36mforge install --mirror https://releases.arcblockio.cn\e[39m\r\n\r\n  Curious about how to use a subcommand?\r\n  > \e[36mforge help install\e[39m\r\n  \r\n"
  - delay: 7
    content: 'Shis-MacBook-Pro:assets shi$ '
  - delay: 4542
    content: "logout\r\n"
